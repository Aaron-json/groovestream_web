/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as CompleteProfileImport } from './routes/complete-profile'
import { Route as AuthImport } from './routes/auth'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedSocialImport } from './routes/_authenticated/social'
import { Route as AuthenticatedLibraryIndexImport } from './routes/_authenticated/library/index'
import { Route as AuthenticatedLibraryPlaylistsPlaylistIdImport } from './routes/_authenticated/library/playlists.$playlistId'
import { Route as AuthenticatedLibraryPlaylistsPlaylistIdIndexImport } from './routes/_authenticated/library/playlists.$playlistId/index'
import { Route as AuthenticatedLibraryPlaylistsPlaylistIdUploadImport } from './routes/_authenticated/library/playlists.$playlistId/upload'

// Create/Update Routes

const CompleteProfileRoute = CompleteProfileImport.update({
  id: '/complete-profile',
  path: '/complete-profile',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSocialRoute = AuthenticatedSocialImport.update({
  id: '/social',
  path: '/social',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedLibraryIndexRoute = AuthenticatedLibraryIndexImport.update({
  id: '/library/',
  path: '/library/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedLibraryPlaylistsPlaylistIdRoute =
  AuthenticatedLibraryPlaylistsPlaylistIdImport.update({
    id: '/library/playlists/$playlistId',
    path: '/library/playlists/$playlistId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute =
  AuthenticatedLibraryPlaylistsPlaylistIdIndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedLibraryPlaylistsPlaylistIdRoute,
  } as any)

const AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute =
  AuthenticatedLibraryPlaylistsPlaylistIdUploadImport.update({
    id: '/upload',
    path: '/upload',
    getParentRoute: () => AuthenticatedLibraryPlaylistsPlaylistIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/complete-profile': {
      id: '/complete-profile'
      path: '/complete-profile'
      fullPath: '/complete-profile'
      preLoaderRoute: typeof CompleteProfileImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/social': {
      id: '/_authenticated/social'
      path: '/social'
      fullPath: '/social'
      preLoaderRoute: typeof AuthenticatedSocialImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/library/': {
      id: '/_authenticated/library/'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof AuthenticatedLibraryIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/library/playlists/$playlistId': {
      id: '/_authenticated/library/playlists/$playlistId'
      path: '/library/playlists/$playlistId'
      fullPath: '/library/playlists/$playlistId'
      preLoaderRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/library/playlists/$playlistId/upload': {
      id: '/_authenticated/library/playlists/$playlistId/upload'
      path: '/upload'
      fullPath: '/library/playlists/$playlistId/upload'
      preLoaderRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdUploadImport
      parentRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdImport
    }
    '/_authenticated/library/playlists/$playlistId/': {
      id: '/_authenticated/library/playlists/$playlistId/'
      path: '/'
      fullPath: '/library/playlists/$playlistId/'
      preLoaderRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdIndexImport
      parentRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedLibraryPlaylistsPlaylistIdRouteChildren {
  AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute
  AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute
}

const AuthenticatedLibraryPlaylistsPlaylistIdRouteChildren: AuthenticatedLibraryPlaylistsPlaylistIdRouteChildren =
  {
    AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute:
      AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute,
    AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute:
      AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute,
  }

const AuthenticatedLibraryPlaylistsPlaylistIdRouteWithChildren =
  AuthenticatedLibraryPlaylistsPlaylistIdRoute._addFileChildren(
    AuthenticatedLibraryPlaylistsPlaylistIdRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedSocialRoute: typeof AuthenticatedSocialRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedLibraryIndexRoute: typeof AuthenticatedLibraryIndexRoute
  AuthenticatedLibraryPlaylistsPlaylistIdRoute: typeof AuthenticatedLibraryPlaylistsPlaylistIdRouteWithChildren
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedSocialRoute: AuthenticatedSocialRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedLibraryIndexRoute: AuthenticatedLibraryIndexRoute,
  AuthenticatedLibraryPlaylistsPlaylistIdRoute:
    AuthenticatedLibraryPlaylistsPlaylistIdRouteWithChildren,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/auth': typeof AuthRoute
  '/complete-profile': typeof CompleteProfileRoute
  '/social': typeof AuthenticatedSocialRoute
  '/': typeof AuthenticatedIndexRoute
  '/library': typeof AuthenticatedLibraryIndexRoute
  '/library/playlists/$playlistId': typeof AuthenticatedLibraryPlaylistsPlaylistIdRouteWithChildren
  '/library/playlists/$playlistId/upload': typeof AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute
  '/library/playlists/$playlistId/': typeof AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute
}

export interface FileRoutesByTo {
  '/auth': typeof AuthRoute
  '/complete-profile': typeof CompleteProfileRoute
  '/social': typeof AuthenticatedSocialRoute
  '/': typeof AuthenticatedIndexRoute
  '/library': typeof AuthenticatedLibraryIndexRoute
  '/library/playlists/$playlistId/upload': typeof AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute
  '/library/playlists/$playlistId': typeof AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/auth': typeof AuthRoute
  '/complete-profile': typeof CompleteProfileRoute
  '/_authenticated/social': typeof AuthenticatedSocialRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/library/': typeof AuthenticatedLibraryIndexRoute
  '/_authenticated/library/playlists/$playlistId': typeof AuthenticatedLibraryPlaylistsPlaylistIdRouteWithChildren
  '/_authenticated/library/playlists/$playlistId/upload': typeof AuthenticatedLibraryPlaylistsPlaylistIdUploadRoute
  '/_authenticated/library/playlists/$playlistId/': typeof AuthenticatedLibraryPlaylistsPlaylistIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/auth'
    | '/complete-profile'
    | '/social'
    | '/'
    | '/library'
    | '/library/playlists/$playlistId'
    | '/library/playlists/$playlistId/upload'
    | '/library/playlists/$playlistId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/auth'
    | '/complete-profile'
    | '/social'
    | '/'
    | '/library'
    | '/library/playlists/$playlistId/upload'
    | '/library/playlists/$playlistId'
  id:
    | '__root__'
    | '/_authenticated'
    | '/auth'
    | '/complete-profile'
    | '/_authenticated/social'
    | '/_authenticated/'
    | '/_authenticated/library/'
    | '/_authenticated/library/playlists/$playlistId'
    | '/_authenticated/library/playlists/$playlistId/upload'
    | '/_authenticated/library/playlists/$playlistId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  AuthRoute: typeof AuthRoute
  CompleteProfileRoute: typeof CompleteProfileRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  AuthRoute: AuthRoute,
  CompleteProfileRoute: CompleteProfileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/auth",
        "/complete-profile"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/social",
        "/_authenticated/",
        "/_authenticated/library/",
        "/_authenticated/library/playlists/$playlistId"
      ]
    },
    "/auth": {
      "filePath": "auth.tsx"
    },
    "/complete-profile": {
      "filePath": "complete-profile.tsx"
    },
    "/_authenticated/social": {
      "filePath": "_authenticated/social.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/library/": {
      "filePath": "_authenticated/library/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/library/playlists/$playlistId": {
      "filePath": "_authenticated/library/playlists.$playlistId.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/library/playlists/$playlistId/upload",
        "/_authenticated/library/playlists/$playlistId/"
      ]
    },
    "/_authenticated/library/playlists/$playlistId/upload": {
      "filePath": "_authenticated/library/playlists.$playlistId/upload.tsx",
      "parent": "/_authenticated/library/playlists/$playlistId"
    },
    "/_authenticated/library/playlists/$playlistId/": {
      "filePath": "_authenticated/library/playlists.$playlistId/index.tsx",
      "parent": "/_authenticated/library/playlists/$playlistId"
    }
  }
}
ROUTE_MANIFEST_END */
